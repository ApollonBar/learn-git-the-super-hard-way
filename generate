#!/bin/bash

set -uo pipefail

if [ "$#" -eq 0 ]; then
    echo "Error: please specify what to generate" >&2
    exit 1
fi

DK="generate-$$"
docker run -d --name "$DK" -i learn-git-generate >&2
TMP="$(mktemp)"
TMP2="$(mktemp)"

while [ "$#" -gt 0 ]; do
    STATE=TEXT
    FILE="$1"
    printf 'File %s\n' "$FILE" >&2
    shift
    while IFS= read -r line; do
        case "$STATE" in
            TEXT)
                if [ "$#" -eq 0 ]; then
                    printf '%s\n' "$line"
                fi
                if [ "$line" = '```bash' ]; then
                    STATE=CODE
                fi
                ;;
            CODE)
                if [ "$line" = '```' ]; then
                    cat "$TMP2" >>"$TMP"
                    truncate -s 0 "$TMP2"
                    if [ "$#" -eq 0 ]; then
                        docker exec -i "$DK" /bin/bash <"$TMP"
                        printf '%s\n' "$line"
                    else
                        docker exec -i "$DK" /bin/bash <"$TMP" >/dev/null
                    fi
                    truncate -s 0 "$TMP"
                    STATE=TEXT
                else
                    printf 'printf "%%s\\n" %q \n' "$line" >>"$TMP"
                    if [ -z "$(printf '%s' "$line" | grep '^#')" ]; then
                        if [ -z "$(printf '%s' "$line" | grep -e '\\$' -e ';$' -e 'EOF$')" ]; then
                            OBJ="$TMP"
                            cat "$TMP2" >>"$TMP"
                            truncate -s 0 "$TMP2"
                        elif [ -z "$(printf '%s' "$line" | grep -e 'EOF$')" ]; then
                            OBJ="$TMP2"
                        else
                            OBJ="$TMP2"
                            STATE=LITERAL
                        fi
                        if [ -z "$(printf '%s' "$line" | grep -e '^cd ' -e '\\$' -e ';$')" ]; then
                            printf '%s | sed "s/^/# /" | sed "s/^# $/#/"\n' "$line" >>"$OBJ"
                        else
                            printf '%s\n' "$line" >>"$OBJ"
                        fi
                    else
                        cat "$TMP2" >>"$TMP"
                        truncate -s 0 "$TMP2"
                    fi
                fi
                ;;
            LITERAL)
                printf 'printf "%%s\\n" %q \n' "$line" >>"$TMP"
                printf '%s\n' "$line" >>"$TMP2"
                if [ "$line" = 'EOF' ]; then
                    STATE=CODE
                fi
                ;;
        esac
    done <"$FILE"
done

docker rm -f "$DK" >&2
rm -f "$TMP" "$TMP2"
