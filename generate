#!/bin/bash

set -euo pipefail

TMP2="$(mktemp)"
finish() {
    rm -f "$TMP2"
}
trap finish EXIT

exec 3>&1 4>&2

STATE=TEXT

while IFS= read -r line; do
    case "$STATE" in
        TEXT)
            if [ "$#" -eq 0 ]; then
                printf 'printf "%%s\\n" %q \n' "$line"
            fi
            if [ "$line" = '```bash' ]; then
                echo '('
                STATE=CODE
            fi
            ;;
        CODE)
            if [ "$line" = '```' ]; then
                cat "$TMP2"
                truncate -s 0 "$TMP2"
                echo ')'
                if [ "$#" -eq 0 ]; then
                    printf 'printf "%%s\\n" %q \n' "$line"
                fi
                STATE=TEXT
            else
                printf 'printf "%%s\\n" %q \n' "$line"
                if [ -z "$(printf '%s' "$line" | grep '^#')" ]; then
                    if [ -z "$(printf '%s' "$line" | grep -e '\\$' -e ';$' -e 'EOF$')" ]; then
                        OBJ=
                        cat "$TMP2"
                        truncate -s 0 "$TMP2"
                    elif [ -z "$(printf '%s' "$line" | grep -e 'EOF$')" ]; then
                        OBJ=YES
                    else
                        OBJ=YES
                        STATE=LITERAL
                    fi
                    if [ -z "$(printf '%s' "$line" | grep -e '^cd ' -e '\\$' -e ';$')" ]; then
                        if [ -z "$OBJ" ]; then
                            printf '%s | sed "s/^/# /" | sed "s/^# $/#/"\n' "$line"
                        else
                            printf '%s | sed "s/^/# /" | sed "s/^# $/#/"\n' "$line" >>"$TMP2"
                        fi
                    else
                        if [ -z "$OBJ" ]; then
                            printf '%s\n' "$line"
                        else
                            printf '%s\n' "$line" >>"$TMP2"
                        fi
                    fi
                else
                    cat "$TMP2"
                    truncate -s 0 "$TMP2"
                fi
            fi
            ;;
        LITERAL)
            printf 'printf "%%s\\n" %q \n' "$line"
            printf '%s\n' "$line" >>"$TMP2"
            if [ "$line" = 'EOF' ]; then
                STATE=CODE
                cat "$TMP2"
                truncate -s 0 "$TMP2"
            fi
            ;;
    esac
done | docker run --rm -i learn-git-generate 1> >(
    while read line; do
        printf '%s\n' "$line" >&3
        printf '%s\n' "$line" >&4
    done
) 2> >(
    while read line; do
        printf '# %s\n' "$line" >&3
        printf '# \e[01;31m%s\e[0m\n' "$line" >&4
    done
)
